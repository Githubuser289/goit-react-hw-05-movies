{"version":3,"file":"static/js/415.c45ab084.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","pages/Home.jsx","services/TheMovieDBapi.js"],"sourcesContent":["import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = props => {\n  const location = useLocation();\n\n  return (\n    <nav>\n      <ul>\n        {props.data.map((movie, index) => {\n          return (\n            <li key={index}>\n              <Link\n                to={`/goit-react-hw-05-movies/movies/${movie.id}`}\n                state={{ from: location }}\n              >\n                {movie.title}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </nav>\n  );\n};\n\nMoviesList.propTypes = {\n  data: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\n// to adapt this function in order to get a gallery filled with movie posters\n// function renderMoviesList(list) {\n//   const markup = list\n//     .map(({ id, poster_path, title, genres, release_year, vote_average }) => {\n//       // adaug elemente in markup\n//       return `<div>\n//     <img id=\"${id}\" src=\"${poster_path}\" alt=\"movie poster\" loading=\"lazy\" />\n//             <p class=\"movie-title\">   ${title} </p>\n//             <p class=\"movie-short-descr\"> ${genres} | ${release_year} | <span>${vote_average}</span></p>\n//         </div>`;\n//     })\n//     .join('');\n//   const moviesDivElem = document.querySelector('.movies-div');\n//   moviesDivElem.innerHTML = markup;\n// }\n","import { MoviesList } from 'components/MoviesList';\nimport React, { useEffect, useState } from 'react';\nimport { fetchTrendingMovies, fetchMoviesGenres } from 'services/TheMovieDBapi';\nimport Loader from 'components/Loader';\n\nlet listOfGenres,\n  counter = 0;\nlet movieData = {\n  id: 0,\n  title: '',\n  original_title: '',\n  overview: '',\n  poster_path: '',\n  genres: '',\n  popularity: 0,\n  release_year: 0,\n  vote_average: 0,\n  vote_count: 0,\n};\nlet movieArray = [];\n\nconst Home = () => {\n  const [flag, setFlag] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  async function renderTrendingMovies() {\n    const listOfGen = await fetchMoviesGenres();\n    listOfGenres = listOfGen.genres;\n\n    const data = await fetchTrendingMovies(1);\n    // const spanElem = document.querySelector('.error-message');\n    // if (spanElem.innerHTML !== '') return;\n\n    //get the movie data and put them into movieData, and push them into movieArray\n    data.results.map(\n      ({\n        id,\n        title,\n        original_title,\n        overview,\n        poster_path,\n        genre_ids,\n        popularity,\n      }) => {\n        movieData = {\n          id,\n          title,\n          original_title,\n          overview,\n          popularity,\n        };\n        if (poster_path === null) {\n          movieData.poster_path =\n            'https://dummyimage.com/395x574/000/fff.jpg&amp;text=no+poster';\n        } else {\n          movieData.poster_path =\n            'https://www.themoviedb.org/t/p/w500' + poster_path;\n        }\n\n        // transform array \"genre_ids\" in string \"genres\", property of movieData\n        let genre = '';\n        for (let i = 0; i < genre_ids.length; i++) {\n          if (i > 0) {\n            genre += ', ';\n          }\n          let j = 0;\n          while (listOfGenres[j]['id'] !== genre_ids[i]) j++;\n          genre += listOfGenres[j].name;\n        }\n        movieData.genres = genre;\n        counter++;\n        if (counter <= 20) movieArray.push(movieData);\n        return movieData;\n      }\n    );\n    setFlag(true);\n    setIsLoading(false);\n  }\n\n  useEffect(() => {\n    setIsLoading(true);\n    renderTrendingMovies();\n  }, []);\n\n  return (\n    <main>\n      {isLoading && <Loader />}\n      {flag && <h1>Trending today</h1>}\n      {flag && <MoviesList data={movieArray} />}\n    </main>\n  );\n};\n\nexport default Home;\n","import axios from 'axios';\nconst TMDB_URL = `https://api.themoviedb.org/3/`,\n  API_KEY = `cfa02d8137a4395c6860edb4676198c3`,\n  PART1 = 'include_adult=false',\n  PART2 = 'language=en-US';\n\nasync function fetchMovieCredits(movieId) {\n  try {\n    const response = await axios.get(\n      `${TMDB_URL}/movie/${movieId}/credits?api_key=${API_KEY}&${PART2}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Oops! Something went wrong! Error:` + error);\n    // spanElem.innerHTML = 'Oops! Something went wrong!';\n  }\n}\n\nasync function fetchMovieDetails(movieId) {\n  try {\n    const response = await axios.get(\n      `${TMDB_URL}/movie/${movieId}?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Oops! Something went wrong! Error:` + error);\n    // spanElem.innerHTML = 'Oops! Something went wrong!';\n  }\n}\n\nasync function fetchMoviesGenres() {\n  try {\n    const response = await axios.get(\n      `${TMDB_URL}/genre/movie/list?api_key=${API_KEY}&${PART2}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Oops! Something went wrong! Error:` + error);\n    // spanElem.innerHTML = 'Oops! Something went wrong!';\n  }\n}\n\nasync function fetchMovieReviews(movieId) {\n  try {\n    const response = await axios.get(\n      `${TMDB_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Oops! Something went wrong! Error:` + error);\n    // spanElem.innerHTML = 'Oops! Something went wrong!';\n  }\n}\n\nasync function fetchTrendingMovies(pageNo) {\n  try {\n    const response = await axios.get(\n      `${TMDB_URL}/trending/movie/day?api_key=${API_KEY}&${PART1}&${PART2}&page=${pageNo}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Oops! Something went wrong! Error:` + error);\n    const spanElem = document.querySelector('.error-message');\n    spanElem.innerHTML = 'Oops! Something went wrong!';\n    const moviesDivElem = document.querySelector('.movies-div');\n    moviesDivElem.innerHTML = '';\n    const btnsDivElem = document.querySelector('.buttons-div');\n    if (btnsDivElem !== null) btnsDivElem.remove();\n    window.scrollTo(0, 0);\n  }\n}\n\nasync function fetchSearchedMovies(searchQuery, pageNo) {\n  try {\n    const response = await axios.get(\n      `${TMDB_URL}/search/movie?query=${searchQuery}&api_key=${API_KEY}&${PART1}&${PART2}&page=${pageNo}`\n    );\n    return response.data;\n  } catch (error) {\n    console.error(`Oops! Something went wrong! Error:` + error);\n    const spanElem = document.querySelector('.error-message');\n    spanElem.innerHTML = 'Oops! Something went wrong!';\n    window.scrollTo(0, 0);\n  }\n}\n\nexport {\n  fetchMovieCredits,\n  fetchMovieDetails,\n  fetchMovieReviews,\n  fetchMoviesGenres,\n  fetchTrendingMovies,\n  fetchSearchedMovies,\n};\n"],"names":["MoviesList","props","location","useLocation","_jsx","children","data","map","movie","index","Link","to","concat","id","state","from","title","listOfGenres","counter","movieData","original_title","overview","poster_path","genres","popularity","release_year","vote_average","vote_count","movieArray","_useState","useState","_useState2","_slicedToArray","flag","setFlag","_useState3","_useState4","isLoading","setIsLoading","_renderTrendingMovies","_asyncToGenerator","_regeneratorRuntime","_callee","listOfGen","_context","prev","next","fetchMoviesGenres","sent","fetchTrendingMovies","results","_ref","genre_ids","genre","i","length","j","name","push","stop","apply","arguments","useEffect","renderTrendingMovies","_jsxs","Loader","TMDB_URL","API_KEY","PART1","PART2","fetchMovieCredits","_x","_fetchMovieCredits","movieId","response","axios","abrupt","t0","console","error","fetchMovieDetails","_x2","_fetchMovieDetails","_callee2","_context2","_fetchMoviesGenres","_callee3","_context3","fetchMovieReviews","_x3","_fetchMovieReviews","_callee4","_context4","_x4","_fetchTrendingMovies","_callee5","pageNo","btnsDivElem","_context5","document","querySelector","innerHTML","remove","window","scrollTo","fetchSearchedMovies","_x5","_x6","_fetchSearchedMovies","_callee6","searchQuery","_context6"],"sourceRoot":""}